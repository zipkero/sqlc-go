// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: game.sql

package game

import (
	"context"
	"database/sql"
)

const createPlayer = `-- name: CreatePlayer :execresult
INSERT INTO game.players (player_name, player_level, player_class)
VALUES (?, ?, ?)
`

type CreatePlayerParams struct {
	PlayerName  string
	PlayerLevel int32
	PlayerClass int16
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPlayer, arg.PlayerName, arg.PlayerLevel, arg.PlayerClass)
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE
FROM game.players
WHERE id = ?
`

func (q *Queries) DeletePlayer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, player_name, player_level, player_class, created_at
FROM game.players
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, id int64) (GamePlayer, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i GamePlayer
	err := row.Scan(
		&i.ID,
		&i.PlayerName,
		&i.PlayerLevel,
		&i.PlayerClass,
		&i.CreatedAt,
	)
	return i, err
}

const listPlayers = `-- name: ListPlayers :many
SELECT id, player_name, player_level, player_class, created_at
FROM game.players
ORDER BY player_name
`

func (q *Queries) ListPlayers(ctx context.Context) ([]GamePlayer, error) {
	rows, err := q.db.QueryContext(ctx, listPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GamePlayer
	for rows.Next() {
		var i GamePlayer
		if err := rows.Scan(
			&i.ID,
			&i.PlayerName,
			&i.PlayerLevel,
			&i.PlayerClass,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :execresult
UPDATE game.players
SET player_name  = ?,
    player_level = ?,
    player_class = ?
WHERE id = ?
`

type UpdatePlayerParams struct {
	PlayerName  string
	PlayerLevel int32
	PlayerClass int16
	ID          int64
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePlayer,
		arg.PlayerName,
		arg.PlayerLevel,
		arg.PlayerClass,
		arg.ID,
	)
}
