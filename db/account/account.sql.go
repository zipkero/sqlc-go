// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package account

import (
	"context"
	"database/sql"
)

const deleteAccount = `-- name: DeleteAccount :exec
DELETE
FROM account.users
WHERE id = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, email, username, password
FROM account.users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (AccountUser, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i AccountUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, email, username, password
FROM account.users
ORDER BY username
`

func (q *Queries) ListAccounts(ctx context.Context) ([]AccountUser, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountUser
	for rows.Next() {
		var i AccountUser
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :execresult
UPDATE account.users
SET username = ?,
    password = ?
WHERE id = ?
`

type UpdateAccountParams struct {
	Username string
	Password string
	ID       int64
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccount, arg.Username, arg.Password, arg.ID)
}
